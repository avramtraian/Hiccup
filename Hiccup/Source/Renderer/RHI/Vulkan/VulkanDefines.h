// Copyright (c) 2022-2022 Avram Traian. All rights reserved.

#pragma once

#include "Core/Core.h"

#include <vulkan/vulkan.h>

#define HC_VULKAN_CHECK(EXPRESSION)                                                             \
	if (auto r = (EXPRESSION); r != VK_SUCCESS)                                                 \
	{                                                                                           \
		HC_ASSERTF(false, "Vulkan call failed with code: %s!", ::HC::vk_result_to_string(r));   \
	}

namespace HC
{

#define HC_VK_RESULT_CASE(VK_RESULT) case VK_RESULT: return #VK_RESULT

inline constexpr const char* vk_result_to_string(VkResult result)
{
	switch (result)
	{
		HC_VK_RESULT_CASE(VK_SUCCESS);
		HC_VK_RESULT_CASE(VK_NOT_READY);
		HC_VK_RESULT_CASE(VK_TIMEOUT);
		HC_VK_RESULT_CASE(VK_EVENT_SET);
		HC_VK_RESULT_CASE(VK_EVENT_RESET);
		HC_VK_RESULT_CASE(VK_INCOMPLETE);
		HC_VK_RESULT_CASE(VK_ERROR_OUT_OF_HOST_MEMORY);
		HC_VK_RESULT_CASE(VK_ERROR_OUT_OF_DEVICE_MEMORY);
		HC_VK_RESULT_CASE(VK_ERROR_INITIALIZATION_FAILED);
		HC_VK_RESULT_CASE(VK_ERROR_DEVICE_LOST);
		HC_VK_RESULT_CASE(VK_ERROR_MEMORY_MAP_FAILED);
		HC_VK_RESULT_CASE(VK_ERROR_LAYER_NOT_PRESENT);
		HC_VK_RESULT_CASE(VK_ERROR_EXTENSION_NOT_PRESENT);
		HC_VK_RESULT_CASE(VK_ERROR_FEATURE_NOT_PRESENT);
		HC_VK_RESULT_CASE(VK_ERROR_INCOMPATIBLE_DRIVER);
		HC_VK_RESULT_CASE(VK_ERROR_TOO_MANY_OBJECTS);
		HC_VK_RESULT_CASE(VK_ERROR_FORMAT_NOT_SUPPORTED);
		HC_VK_RESULT_CASE(VK_ERROR_FRAGMENTED_POOL);
		HC_VK_RESULT_CASE(VK_ERROR_UNKNOWN);
		HC_VK_RESULT_CASE(VK_ERROR_OUT_OF_POOL_MEMORY);
		HC_VK_RESULT_CASE(VK_ERROR_INVALID_EXTERNAL_HANDLE);
		HC_VK_RESULT_CASE(VK_ERROR_FRAGMENTATION);
		HC_VK_RESULT_CASE(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
		HC_VK_RESULT_CASE(VK_PIPELINE_COMPILE_REQUIRED);
		HC_VK_RESULT_CASE(VK_ERROR_SURFACE_LOST_KHR);
		HC_VK_RESULT_CASE(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
		HC_VK_RESULT_CASE(VK_SUBOPTIMAL_KHR);
		HC_VK_RESULT_CASE(VK_ERROR_OUT_OF_DATE_KHR);
		HC_VK_RESULT_CASE(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
		HC_VK_RESULT_CASE(VK_ERROR_VALIDATION_FAILED_EXT);
		HC_VK_RESULT_CASE(VK_ERROR_INVALID_SHADER_NV);
		HC_VK_RESULT_CASE(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
		HC_VK_RESULT_CASE(VK_ERROR_NOT_PERMITTED_KHR);
		HC_VK_RESULT_CASE(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
		HC_VK_RESULT_CASE(VK_THREAD_IDLE_KHR);
		HC_VK_RESULT_CASE(VK_THREAD_DONE_KHR);
		HC_VK_RESULT_CASE(VK_OPERATION_DEFERRED_KHR);
		HC_VK_RESULT_CASE(VK_OPERATION_NOT_DEFERRED_KHR);
		HC_VK_RESULT_CASE(VK_ERROR_COMPRESSION_EXHAUSTED_EXT);
	}

	return "undefined";
}

#undef HC_VK_RESULT_CASE

} // namespace HC